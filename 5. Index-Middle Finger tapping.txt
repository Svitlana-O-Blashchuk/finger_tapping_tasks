import pandas as pd
import ast
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path
from IPython.display import HTML, display

def get_button_press_order(resp2, resp3):
    # Remove None values and create tuples with button identifiers
    resp2_times = [(time, 2) for time in resp2 if time is not None]
    resp3_times = [(time, 3) for time in resp3 if time is not None]
    
    # Combine and sort the times
    combined_times = sorted(resp2_times + resp3_times, key=lambda x: x[0])
    
    # Extract just the button order
    button_order = [btn for _, btn in combined_times]
    
    # Convert to string representation
    order_string = ''.join(map(str, button_order))
    
    return order_string

def check_sequence(order_string):
    # List to store correctness of each press (True/False)
    correctness = []
    
    for i in range(len(order_string)):
        # For first number
        if i == 0:
            # Check if next number exists and is correct
            if len(order_string) > 1:
                if order_string[i] == '2' and order_string[i+1] == '3':
                    correctness.append(True)
                elif order_string[i] == '3' and order_string[i+1] == '2':
                    correctness.append(True)
                else:
                    correctness.append(False)
            else:
                correctness.append(False)  # Single number is incorrect
                
        # For last number
        elif i == len(order_string) - 1:
            # Check if previous press was correct and follows pattern
            if correctness[i-1]:
                if order_string[i-1] == '2' and order_string[i] == '3':
                    correctness.append(True)
                elif order_string[i-1] == '3' and order_string[i] == '2':
                    correctness.append(True)
                else:
                    correctness.append(False)
            else:
                correctness.append(False)
                
        # For all other numbers
        else:
            if order_string[i] == '2' and order_string[i+1] == '3':
                correctness.append(True)
            elif order_string[i] == '3' and order_string[i+1] == '2':
                correctness.append(True)
            else:
                correctness.append(False)
    
    total_presses = len(order_string)
    correct_presses = sum(correctness)
    accuracy = (correct_presses / total_presses) * 100
    
    return correctness, total_presses, correct_presses, accuracy

# Read and process the CSV file
df = pd.read_csv(r"D:\UHASSELT\1. phd\24 motor task\data\0502.csv")
subset_df = df.iloc[4:14]

# Create a dictionary to store results
results_dict = {}

# Process each row
for i, (_, row) in enumerate(subset_df.iterrows(), start=1):
    print(f"\nAnalyzing Sequence {i}")
    print("-" * 50)
    
    # Get the values from the columns
    resp2_val = row["resp_2.rt"]
    resp3_val = row["resp_3.rt"]
    
    # Convert string representation to an actual list if necessary
    if isinstance(resp2_val, str):
        resp2_list = ast.literal_eval(resp2_val)
    else:
        resp2_list = resp2_val
        
    if isinstance(resp3_val, str):
        resp3_list = ast.literal_eval(resp3_val)
    else:
        resp3_list = resp3_val
    
    # Get the order string
    order_string = get_button_press_order(resp2_list, resp3_list)
    print(f"Button Press Order: {order_string}")
    
    # Analyze the sequence
    correctness, total_presses, correct_presses, accuracy = check_sequence(order_string)
    
    # Store results
    results_dict[f"Sequence_{i}"] = {
        "order": order_string,
        "total_presses": total_presses,
        "correct_presses": correct_presses,
        "accuracy": accuracy
    }
    
    # Print results
    print(f"\nTotal presses: {total_presses}")
    print(f"Correct presses: {correct_presses}")
    print(f"Accuracy: {accuracy:.2f}%")

# Create summary DataFrame
summary_df = pd.DataFrame.from_dict(results_dict, orient='index')
print("\nSummary of All Sequences")
print("-" * 50)
print(summary_df)

# Calculate overall statistics
print("\nOverall Statistics")
print("-" * 50)
print(f"Average accuracy: {summary_df['accuracy'].mean():.2f}%")
print(f"Best accuracy: {summary_df['accuracy'].max():.2f}%")
print(f"Worst accuracy: {summary_df['accuracy'].min():.2f}%")
print(f"Total correct presses: {summary_df['correct_presses'].sum()}")
print(f"Total presses: {summary_df['total_presses'].sum()}")
print(f"Average presses: {summary_df['total_presses'].sum()/len(summary_df['total_presses'])}")